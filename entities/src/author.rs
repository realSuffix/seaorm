//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "author")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::post::Entity",
        from = "Column::Id",
        to = "super::post::Column::AuthorId"
    )]
    Posts1,
    #[sea_orm(
        belongs_to = "super::post::Entity",
        from = "Column::Id",
        to = "super::post::Column::Author2Id"
    )]
    Posts2,
}

#[derive(Debug)]
pub struct AuthorToPost1;

impl Linked for AuthorToPost1 {
    type FromEntity = Entity;
    type ToEntity = super::post::Entity;

    fn link(&self) -> Vec<sea_orm::LinkDef> {
        vec![Relation::Posts1.def()]
    }
}

#[derive(Debug)]
pub struct AuthorToPost2;

impl Linked for AuthorToPost2 {
    type FromEntity = Entity;
    type ToEntity = super::post::Entity;

    fn link(&self) -> Vec<sea_orm::LinkDef> {
        vec![Relation::Posts2.def()]
    }
}

impl ActiveModelBehavior for ActiveModel {}
